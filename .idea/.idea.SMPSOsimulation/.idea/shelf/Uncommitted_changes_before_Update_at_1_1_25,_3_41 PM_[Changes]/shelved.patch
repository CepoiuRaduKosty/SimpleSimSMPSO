Index: SMPSOsimulation/VEGAOrchestrator.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Security.Cryptography;\nusing SMPSOsimulation.dataStructures;\n\nnamespace SMPSOsimulation;\n\npublic class VEGAOrchestrator\n{\n    private class Individual\n    {\n        public int[] genes;\n        public double[] result;\n\n        public Individual(CPUConfig config)\n        {\n            genes = new int[]\n            {\n                config.Superscalar,\n                config.Rename,\n                config.Reorder,\n                (int)config.RsbArchitecture,\n                config.SeparateDispatch ? 1 : 0,\n                config.Iadd,\n                config.Imult,\n                config.Idiv,\n                config.Fpadd,\n                config.Fpmult,\n                config.Fpdiv,\n                config.Fpsqrt,\n                config.Branch,\n                config.Load,\n                config.Store,\n                config.Freq\n            };\n            result = new double[2];\n        }\n\n        public CPUConfig GetConfig()\n        {\n            // Map the genes back to a CPUConfig\n            int superscalar = genes[0];\n            int rename = genes[1];\n            int reorder = genes[2];\n            RsbArchitectureType rsbArchitecture = (RsbArchitectureType)genes[3];\n            bool separateDispatch = genes[4] == 1; // Convert back to boolean\n            int iadd = genes[5];\n            int imult = genes[6];\n            int idiv = genes[7];\n            int fpadd = genes[8];\n            int fpmult = genes[9];\n            int fpdiv = genes[10];\n            int fpsqrt = genes[11];\n            int branch = genes[12];\n            int load = genes[13];\n            int store = genes[14];\n            int freq = genes[15];\n\n            // Create and return a new CPUConfig object\n            return new CPUConfig(superscalar, rename, reorder, rsbArchitecture, separateDispatch,\n                iadd, imult, idiv, fpadd, fpmult, fpdiv, fpsqrt, branch, load, store, freq);\n        }\n    }\n\n    private (Individual, Individual) Crossover(Individual parent1, Individual parent2, float maxFrequency)\n    {\n        // Constants for SBX (can be adjusted)\n        double eta = 15.0; // Distribution index (controls the spread of the offspring around the parents)\n        Random random = new Random();\n\n        // Create offspring\n        Individual child1 = new Individual(parent1.GetConfig());\n        Individual child2 = new Individual(parent2.GetConfig());\n\n        for (int i = 0; i < parent1.genes.Length; i++)\n        {\n            // Extract the parent genes as doubles for calculation\n            double gene1 = parent1.genes[i];\n            double gene2 = parent2.genes[i];\n\n            // Swap the values if necessary to ensure gene1 is the smaller value\n            if (random.NextDouble() < 0.5)\n            {\n                (gene1, gene2) = (gene2, gene1);\n            }\n\n            // Apply SBX\n            double delta = gene2 - gene1;\n            double u = random.NextDouble();\n\n            double beta;\n            if (u <= 0.5)\n            {\n                beta = Math.Pow((2 * u), (1.0 / (eta + 1.0)));\n            }\n            else\n            {\n                beta = Math.Pow((0.5 / (1 - u)), (1.0 / (eta + 1.0)));\n            }\n\n            double childGene1 = 0.5 * ((gene1 + gene2) - beta * delta);\n            double childGene2 = 0.5 * ((gene1 + gene2) + beta * delta);\n\n            // Convert the continuous offspring genes back to integers\n            if (i == 3)\n            {\n                childGene1 = Math.Max(Math.Min(childGene1, Enum.GetValues(typeof(RsbArchitectureType)).Length - 1), 0);\n                childGene2 = Math.Max(Math.Min(childGene2, Enum.GetValues(typeof(RsbArchitectureType)).Length - 1), 0);\n            }\n            else if (i == 4)\n            {\n                childGene1 = Math.Max(Math.Min(childGene1, 1), 0);\n                childGene2 = Math.Max(Math.Min(childGene2, 1), 0);\n            }\n            else if (i == 15)\n            {\n                childGene1 = Math.Max(Math.Min(childGene1, maxFrequency), 0);\n                childGene2 = Math.Max(Math.Min(childGene2, maxFrequency), 0);\n            }\n            else\n            {\n                childGene1 = Math.Max(Math.Min(childGene1, CPUConfig.CPUConfigLimits.GetMax(i)), CPUConfig.CPUConfigLimits.GetMin(i));\n                childGene2 = Math.Max(Math.Min(childGene2, CPUConfig.CPUConfigLimits.GetMax(i)), CPUConfig.CPUConfigLimits.GetMin(i));\n            }\n            child1.genes[i] = (int)Math.Round(childGene1);\n            child2.genes[i] = (int)Math.Round(childGene2);\n        }\n\n        return (child1, child2);\n    }\n\n\n    private void Mutate(Individual individual, Random random, double mutationProbability, int maxFrequency)\n    {\n        // Loop through each gene in the individual\n        for (int i = 0; i < individual.genes.Length; i++)\n        {\n            // For each gene, decide whether it should mutate based on the mutation probability\n            if (random.NextDouble() < mutationProbability)\n            {\n                if (i == 3)\n                {\n                    individual.genes[i] = random.Next(0, Enum.GetValues(typeof(RsbArchitectureType)).Length);\n                }\n                else if (i == 4)\n                {\n                    individual.genes[i] = random.Next(0, 2);\n                }\n                else if (i == 15)\n                {\n                    individual.genes[i] = random.Next(1, maxFrequency);\n                }\n                else\n                {\n                    individual.genes[i] = random.Next(CPUConfig.CPUConfigLimits.GetMin(i), CPUConfig.CPUConfigLimits.GetMax(i) + 1);\n                }\n            }\n        }\n    }\n    \n    private static void Shuffle<T>(List<T> list, Random random)\n    {\n        for (int i = list.Count - 1; i > 0; i--)\n        {\n            int j = random.Next(i + 1); // Generate a random index between 0 and i\n            // Swap elements at indices i and j\n            (list[i], list[j]) = (list[j], list[i]);\n        }\n    }\n\n    public List<CPUConfig> StartSearch(SearchConfigVEGA searchConfig, string psatsimExePath, string gtkLibPath)\n    {\n        ResultsProvider resultsProvider = new ResultsProvider(searchConfig.environment, psatsimExePath, gtkLibPath);\n        int subPopSize = searchConfig.populationSize / 2;\n        List<Individual> population = new List<Individual>();\n        Random random = new Random();\n        for (int i = 0; i < searchConfig.populationSize; i++)\n            population.Add(new Individual(CPUConfig.GenerateRandom(searchConfig.environment.MaxFrequency)));\n        \n        for (int generation = 0; generation < searchConfig.maxGenerations; generation++)\n        {\n            //DEbug\n            Console.WriteLine(\"Generation: \" + generation);\n            foreach (Individual individual in population)\n            {\n                Console.WriteLine($\"{individual.result[0]} {individual.result[1]}\");\n            }\n            \n            List<Individual> children = new List<Individual>();\n            while (population.Count < searchConfig.populationSize * 3 / 2)\n            {\n                int index1 = random.Next(population.Count);\n                int index2;\n\n                // Ensure the second index is different from the first\n                do\n                {\n                    index2 = random.Next(population.Count);\n                } while (index2 == index1);\n\n                var parent1 = population[index1];\n                var parent2 = population[index2];\n                \n                var (child1, child2) = Crossover(parent1, parent2, searchConfig.environment.MaxFrequency);\n                \n                Mutate(child1, random, searchConfig.mutationProbability, searchConfig.environment.MaxFrequency);\n                Mutate(child2, random, searchConfig.mutationProbability, searchConfig.environment.MaxFrequency);\n                \n                children.Add(child1);\n                children.Add(child2);\n            }\n            \n            foreach (var child in children)\n                population.Add(child);\n            \n            Shuffle(population, random);\n            \n            List<CPUConfig> individualsConfigs = new List<CPUConfig>();\n            foreach (var individual in population)\n                individualsConfigs.Add(individual.GetConfig());\n            var results = resultsProvider.Evaluate(individualsConfigs);\n            for (int i = 0; i < population.Count; i++)\n            {\n                population[i].result = results[i];\n            }\n\n            List<Individual> bestCPI = population\n                .OrderBy(ind => ind.result[0]) // Sort by CPI (result[0]) in ascending order\n                .Take(subPopSize) // Take the top 'subPopSize' individuals\n                .ToList();\n        \n            List<Individual> bestEnergy = population\n                .OrderBy(ind => ind.result[1]) // Sort by CPI (result[0]) in ascending order\n                .Take(subPopSize) // Take the top 'subPopSize' individuals\n                .ToList();\n\n            population = bestCPI\n                .Union(bestEnergy) // Get the union of bestCPI and bestEnergy\n                .Distinct() // Ensure no duplicates in case an individual is in both lists\n                .ToList(); // Convert back to a list\n        }\n        \n        List<CPUConfig> returnedConfigs = new List<CPUConfig>();\n        foreach (var individual in population)\n            returnedConfigs.Add(individual.GetConfig());\n\n        return returnedConfigs;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SMPSOsimulation/VEGAOrchestrator.cs b/SMPSOsimulation/VEGAOrchestrator.cs
--- a/SMPSOsimulation/VEGAOrchestrator.cs	(revision 72918d2c484533cd523704663659f6c0cd82f226)
+++ b/SMPSOsimulation/VEGAOrchestrator.cs	(date 1735655053664)
@@ -112,8 +112,8 @@
             }
             else if (i == 15)
             {
-                childGene1 = Math.Max(Math.Min(childGene1, maxFrequency), 0);
-                childGene2 = Math.Max(Math.Min(childGene2, maxFrequency), 0);
+                childGene1 = Math.Max(Math.Min(childGene1, maxFrequency), 1);
+                childGene2 = Math.Max(Math.Min(childGene2, maxFrequency), 1);
             }
             else
             {
@@ -185,7 +185,7 @@
             }
             
             List<Individual> children = new List<Individual>();
-            while (population.Count < searchConfig.populationSize * 3 / 2)
+            while (population.Count + children.Count < searchConfig.populationSize * 3 / 2)
             {
                 int index1 = random.Next(population.Count);
                 int index2;
Index: .idea/.idea.SMPSOsimulation/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoGeneratedRunConfigurationManager\">\n    <projectFile>SMPSOsimulation/SMPSOsimulation.csproj</projectFile>\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"c88e21e3-3570-48b5-b6b5-21c3793f6e9b\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/.idea.SMPSOsimulation/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/.idea.SMPSOsimulation/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/SMPSOsimulation/PSAtSimFunctions.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SMPSOsimulation/PSAtSimFunctions.cs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/scheme/.$UI-Orchestrator.drawio.bkp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/scheme/.$UI-Orchestrator.drawio.bkp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/scheme/Configuration Struct.ods\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/scheme/Configuration Struct.ods\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/scheme/UI-Orchestrator.drawio\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/scheme/UI-Orchestrator.drawio\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MetaFilesCheckinStateConfiguration\" checkMetaFiles=\"true\" />\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"SWEA\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2qfpCBhucdzGozQbxoC6l9xO7M0\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;.NET Project.SMPSOsimulation.executor&quot;: &quot;Run&quot;,\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;sa-apucat-cepoaia&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;settings.codegpt.prompts&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"SMPSOsimulation\" type=\"DotNetProject\" factoryName=\".NET Project\">\n      <option name=\"EXE_PATH\" value=\"\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"PASS_PARENT_ENVS\" value=\"1\" />\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\n      <option name=\"USE_MONO\" value=\"0\" />\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\n      <option name=\"PROJECT_PATH\" value=\"$PROJECT_DIR$/SMPSOsimulation/SMPSOsimulation.csproj\" />\n      <option name=\"PROJECT_EXE_PATH_TRACKING\" value=\"1\" />\n      <option name=\"PROJECT_ARGUMENTS_TRACKING\" value=\"1\" />\n      <option name=\"PROJECT_WORKING_DIRECTORY_TRACKING\" value=\"1\" />\n      <option name=\"PROJECT_KIND\" value=\"DotNetCore\" />\n      <option name=\"PROJECT_TFM\" value=\"\" />\n      <method v=\"2\">\n        <option name=\"Build\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"c88e21e3-3570-48b5-b6b5-21c3793f6e9b\" name=\"Changes\" comment=\"\" />\n      <created>1735063353133</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1735063353133</updated>\n      <workItem from=\"1735063354184\" duration=\"1277000\" />\n      <workItem from=\"1735064637739\" duration=\"28000\" />\n      <workItem from=\"1735570041089\" duration=\"2591000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnityCheckinConfiguration\" checkUnsavedScenes=\"true\" />\n  <component name=\"UnityProjectConfiguration\" hasMinimizedUI=\"false\" />\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.SMPSOsimulation/.idea/workspace.xml b/.idea/.idea.SMPSOsimulation/.idea/workspace.xml
--- a/.idea/.idea.SMPSOsimulation/.idea/workspace.xml	(revision 72918d2c484533cd523704663659f6c0cd82f226)
+++ b/.idea/.idea.SMPSOsimulation/.idea/workspace.xml	(date 1735738877754)
@@ -8,10 +8,15 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c88e21e3-3570-48b5-b6b5-21c3793f6e9b" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/SMPSOsimulation/VEGAOrchestrator.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/SMPSOsimulation/dataStructures/SearchConfigVEGA.cs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/.idea.SMPSOsimulation/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.SMPSOsimulation/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SMPSOsimulation/PSAtSimFunctions.cs" beforeDir="false" afterPath="$PROJECT_DIR$/SMPSOsimulation/PSAtSimFunctions.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SMPSOsimulation/Program.cs" beforeDir="false" afterPath="$PROJECT_DIR$/SMPSOsimulation/Program.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SMPSOsimulation/dataStructures/CPUConfig.cs" beforeDir="false" afterPath="$PROJECT_DIR$/SMPSOsimulation/dataStructures/CPUConfig.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/scheme/.$Orchestrator VEGA.drawio.bkp" beforeDir="false" afterPath="$PROJECT_DIR$/scheme/.$Orchestrator VEGA.drawio.bkp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/scheme/.$UI-Orchestrator.drawio.bkp" beforeDir="false" afterPath="$PROJECT_DIR$/scheme/.$UI-Orchestrator.drawio.bkp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/scheme/Configuration Struct.ods" beforeDir="false" afterPath="$PROJECT_DIR$/scheme/Configuration Struct.ods" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/scheme/Orchestrator VEGA.drawio" beforeDir="false" afterPath="$PROJECT_DIR$/scheme/Orchestrator VEGA.drawio" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/scheme/UI-Orchestrator.drawio" beforeDir="false" afterPath="$PROJECT_DIR$/scheme/UI-Orchestrator.drawio" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -21,10 +26,13 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="HighlightingSettingsPerFile">
+    <setting file="mock:///home/cepoiuradu/currentstorage/Documents/Projects/an4smpso/PSATSimSimulation/SMPSOsimulation/Program.cs" root0="SKIP_HIGHLIGHTING" />
   </component>
   <component name="MetaFilesCheckinStateConfiguration" checkMetaFiles="true" />
   <component name="ProblemsViewState">
-    <option name="selectedTabId" value="SWEA" />
+    <option name="selectedTabId" value="CurrentFile" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 2
@@ -36,7 +44,7 @@
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
-    &quot;.NET Project.SMPSOsimulation.executor&quot;: &quot;Run&quot;,
+    &quot;.NET Project.SMPSOsimulation.executor&quot;: &quot;Debug&quot;,
     &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
@@ -47,7 +55,7 @@
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;settings.codegpt.prompts&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.editor&quot;,
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
 }</component>
@@ -81,8 +89,79 @@
       <updated>1735063353133</updated>
       <workItem from="1735063354184" duration="1277000" />
       <workItem from="1735064637739" duration="28000" />
-      <workItem from="1735570041089" duration="2591000" />
+      <workItem from="1735570041089" duration="5090000" />
+      <workItem from="1735575240004" duration="729000" />
+      <workItem from="1735590870972" duration="10752000" />
+      <workItem from="1735605566395" duration="3238000" />
+      <workItem from="1735639968289" duration="1488000" />
+      <workItem from="1735643474506" duration="1547000" />
+      <workItem from="1735646496439" duration="7670000" />
+    </task>
+    <task id="LOCAL-00001" summary="Removed exploration on frequency">
+      <option name="closed" value="true" />
+      <created>1735572752812</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1735572752812</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Refactor `PSAtSimFunctions` to accept an executable path and validate it, ensuring better encapsulation and error handling.">
+      <option name="closed" value="true" />
+      <created>1735573076572</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1735573076572</updated>
+    </task>
+    <task id="LOCAL-00003" summary="Remove obsolete `PSAtSimFunctions` class, add `CPUConfig`, `EnvironmentConfig`, and `PSAtSimWrapper` classes. Update `Program` to utilize new configurations for CPU and environment.">
+      <option name="closed" value="true" />
+      <created>1735601950508</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1735601950508</updated>
+    </task>
+    <task id="LOCAL-00004" summary="Add MaxFrequency property to EnvironmentConfig class&#10;&#10;Introduce a new MaxFrequency property to the EnvironmentConfig class to enhance configuration options. Update the constructor to accept and assign the MaxFrequency parameter.">
+      <option name="closed" value="true" />
+      <created>1735643535939</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1735643535939</updated>
+    </task>
+    <task id="LOCAL-00005" summary="Add SHA-256 hashing method and update frequency type in CPUConfig class&#10;&#10;- Introduce `CalculateSha256` method to compute the SHA-256 hash of the CPU configuration serialized as JSON.&#10;- Change the type of `Freq` property from `float` to `int` for precision in configuration representation.&#10;- Ensure proper validation for `Freq` in the constructor.">
+      <option name="closed" value="true" />
+      <created>1735643558628</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1735643558628</updated>
     </task>
+    <task id="LOCAL-00006" summary="Add SQLite database support for CPU configuration caching&#10;&#10;- Include `System.Data.SQLite` package in the project file.&#10;- Implement `ResultsDB` class to manage database interactions for CPU config cache.&#10;- Create methods to initialize the database and add/retrieve CPU configuration entries.&#10;- Introduce `ResultsProvider` class to leverage `ResultsDB` and evaluate CPU configurations, checking cache before performing evaluations.">
+      <option name="closed" value="true" />
+      <created>1735643575106</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1735643575106</updated>
+    </task>
+    <task id="LOCAL-00007" summary="Updated docs">
+      <option name="closed" value="true" />
+      <created>1735643593160</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1735643593160</updated>
+    </task>
+    <task id="LOCAL-00008" summary="Implement CPU configuration evaluation and domination checks in simulation&#10;&#10;- Refactor CPU configuration initialization to use array syntax for better readability.&#10;- Add new domination classes: SMPSODomination, WeightedSumDomination, and LexicographicDomination with their respective implementations of domination logic.&#10;- Enhance result evaluation process in Main method to include domination assessments based on different criteria.&#10;- Update output formatting for clarity and consistency in displaying results and dominations.">
+      <option name="closed" value="true" />
+      <created>1735646522713</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1735646522713</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -92,6 +171,34 @@
   <component name="UnityProjectConfiguration" hasMinimizedUI="false" />
   <component name="VcsManagerConfiguration">
     <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
+    <MESSAGE value="Removed exploration on frequency" />
+    <MESSAGE value="Refactor `PSAtSimFunctions` to accept an executable path and validate it, ensuring better encapsulation and error handling." />
+    <MESSAGE value="Remove obsolete `PSAtSimFunctions` class, add `CPUConfig`, `EnvironmentConfig`, and `PSAtSimWrapper` classes. Update `Program` to utilize new configurations for CPU and environment." />
+    <MESSAGE value="Add MaxFrequency property to EnvironmentConfig class&#10;&#10;Introduce a new MaxFrequency property to the EnvironmentConfig class to enhance configuration options. Update the constructor to accept and assign the MaxFrequency parameter." />
+    <MESSAGE value="Add SHA-256 hashing method and update frequency type in CPUConfig class&#10;&#10;- Introduce `CalculateSha256` method to compute the SHA-256 hash of the CPU configuration serialized as JSON.&#10;- Change the type of `Freq` property from `float` to `int` for precision in configuration representation.&#10;- Ensure proper validation for `Freq` in the constructor." />
+    <MESSAGE value="Add SQLite database support for CPU configuration caching&#10;&#10;- Include `System.Data.SQLite` package in the project file.&#10;- Implement `ResultsDB` class to manage database interactions for CPU config cache.&#10;- Create methods to initialize the database and add/retrieve CPU configuration entries.&#10;- Introduce `ResultsProvider` class to leverage `ResultsDB` and evaluate CPU configurations, checking cache before performing evaluations." />
+    <MESSAGE value="Updated docs" />
+    <MESSAGE value="Implement CPU configuration evaluation and domination checks in simulation&#10;&#10;- Refactor CPU configuration initialization to use array syntax for better readability.&#10;- Add new domination classes: SMPSODomination, WeightedSumDomination, and LexicographicDomination with their respective implementations of domination logic.&#10;- Enhance result evaluation process in Main method to include domination assessments based on different criteria.&#10;- Update output formatting for clarity and consistency in displaying results and dominations." />
+    <option name="LAST_COMMIT_MESSAGE" value="Implement CPU configuration evaluation and domination checks in simulation&#10;&#10;- Refactor CPU configuration initialization to use array syntax for better readability.&#10;- Add new domination classes: SMPSODomination, WeightedSumDomination, and LexicographicDomination with their respective implementations of domination logic.&#10;- Enhance result evaluation process in Main method to include domination assessments based on different criteria.&#10;- Update output formatting for clarity and consistency in displaying results and dominations." />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="DotNet Breakpoints">
+          <url>file://$PROJECT_DIR$/SMPSOsimulation/dataStructures/CPUConfig.cs</url>
+          <line>86</line>
+          <properties documentPath="$PROJECT_DIR$/SMPSOsimulation/dataStructures/CPUConfig.cs" containingFunctionPresentation="Method 'CalculateSha256'">
+            <startOffsets>
+              <option value="3602" />
+            </startOffsets>
+            <endOffsets>
+              <option value="3603" />
+            </endOffsets>
+          </properties>
+          <option name="timeStamp" value="2" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
